A decorator in Python is a function that "wraps" another function or method to add extra behavior before and/or after the original function runs—without modifying the original function’s code.

It's a very "Pythonic" way to apply logic (like logging, error handling, authentication, etc.) across multiple functions in a clean and reusable way.

OOPS:

I have used a cls method but if we want to use static also its possible

if we want to use instance style like self, initialize a constructor __init__ and put URL and DB and call as a seperate method and return it like self.

and in data ingestion.py ..in mongo connector...call the class and then call the method as an object uri = Config()....then self.client = MongoClient(uri.get_mongo_uri())

Instead of just using default settings, you search for the best parameters for the Logistic Regression model:

C (regularization strength): Controls how much the model tries to fit all the data exactly (overfitting vs. underfitting)

solver: Algorithm used for optimization

max_iter: Maximum number of training iterations

For each combination, you test model performance using:

Precision (minimize false positives)

Recall (minimize false negatives)

F1 (balance both)

You use cross-validation (5 splits) to make sure your results are robust.



----------------------------------------------------------------------------------------------------
Let’s Do EC2 First (Quick, Clear, Easy):
Step 1: Launch an EC2 Instance
Go to EC2 Dashboard

Launch Ubuntu 22.04 (or Amazon Linux 2023)

Allow TCP Port 8501 (Streamlit default) in security group.

Step 2: SSH and Install Docker
sh
Copy
Edit
# On your laptop
ssh ubuntu@<your-ec2-public-ip>
# On EC2 instance
sudo apt update
sudo apt install -y docker.io
sudo usermod -aG docker $USER
newgrp docker
Step 3: Pull and Run Your App
sh
Copy
Edit
# Login to Docker Hub (optional for public images)
docker login -u riswan26

# Pull your image
docker pull riswan26/ipl-streamlit-app:latest

# Run your app with env variable
docker run -d --restart=always -p 8501:8501 -e GROQ_API_KEY=your-actual-groq-key riswan26/ipl-streamlit-app:latest
App will be available at http://<ec2-ip>:8501/

Tip: Use Elastic IP for a static address.

Step 4: Set Up Automatic Deployment
Best practice: Use a simple script or GitHub Actions to SSH into your server and do docker pull && docker restart when you push.

Option 1: Use GitHub Actions for CD
Store EC2 SSH private key in GitHub Secrets (EC2_SSH_KEY).

Add a step in your workflow after Docker push:

yaml
Copy
Edit
- name: Deploy to EC2
  uses: appleboy/ssh-action@v0.1.10
  with:
    host: ${{ secrets.EC2_HOST }}
    username: ubuntu
    key: ${{ secrets.EC2_SSH_KEY }}
    script: |
      docker pull riswan26/ipl-streamlit-app:latest
      docker stop ipl-app || true
      docker rm ipl-app || true
      docker run -d --name ipl-app --restart=always -p 8501:8501 \
        -e GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} \
        riswan26/ipl-streamlit-app:latest
Add secrets EC2_HOST, EC2_SSH_KEY, and GROQ_API_KEY to your repo.

Now, after every push, your app redeploys with the latest code.